import os 
shared_script_dir=os.getcwd() + "/../scripts"
script_dir=os.getcwd() + "/scripts"
print(script_dir)

n = config["repeat"]
repetitions = list(range(n))
print("Number of repetitions " + str(len(repetitions)))

all_error_rates = [0, 0.02, 0.04, 0.06, 0.08, 0.1]
#all_error_rates = [0.08]
error_rates = [0, 0.02, 0.04, 0.06]

# local match lengths 
min_len = 50
max_len = 200

# ibf_fpr
fpr = 0.005

# how much stellar match has to overlap the ground truth
min_overlap = 10

workdir: "work/" + config["workdir"]
data_dir = "/srv/data/evelina/" + config["workdir"]

#-------- Simulation parameters --------
ref_len = config["reference_length"]
query_len = config["query_length"]
matches = config["match_count"]

#-------- Valik parameters --------
bins = config["ibf_bins"]
seg_count = config["seg_count"]
overlap = min_len - 1
max_capacity = config["cart_max_capacity"]
max_carts = config["max_queued_carts"]
shape = "1110100101001101111"
shape_weight = shape.count("1")
shape_size = len(shape)

def get_threshold(wildcards):
	errors = round(float(wildcards.er) * min_len)
	threshold = min_len - shape_size + 1 - (errors * shape_size)
	if (threshold < 3):
		threshold = max(min_len - shape_size + 1 - (errors * shape_weight), 6)
	print("Threshold " + str(threshold) + " for " + str(errors) + " errors")
	return threshold

#-------- Stellar parameters --------
num_matches = config["num_matches"]
sort_thresh = config["sort_threshold"]

#-------- BLAST parameters --------
default_evalue = 10
default_k = 28

def get_blast_word_size(wildcards):
	errors = int(round(float(wildcards.er) * min_len)) 
	print(errors)
	for k in range(49, 6, -1):
		if ((min_len - k + 1 - errors * k) >= 1):
			print("Max word size " + str(k) + " for max error rate " + wildcards.er)
			return k

#-------- LAST parameters --------
last_w = 1
last_l = 1
last_k = 1

#--------\ Shared functions --------
import random
import math

# simulation needs unique seeds otherwise the same sequence is simulated
def get_seed(wildcards):
        return random.randint(0, 1000000)

#-------- Shared functions \--------

rule make_all:
	input:
		#expand("meta/ref_rep{rep}_e{er}.bin", rep = repetitions, er = all_error_rates)	
		#expand("ref_rep{rep}.fasta", rep = repetitions)
		#expand("/dev/shm/rep{rep}.index", rep = repetitions, er = error_rates)
		#expand("evaluation/valik_rep{rep}_e{er}.tsv", rep = repetitions, er = error_rates),
		#expand("evaluation/stellar_rep{rep}_e{er}.tsv", rep = repetitions, er = error_rates)
		#"stellar_table1.tsv",
		#"dist_stellar_table1.tsv",
		#"blast_table1.tsv",
		#"blast_default_table1.tsv",
		"valik_table1.tsv",
		"last_table1.tsv"
		#"lastz_table1.tsv"
		#expand("lastz/rep{rep}_e{er}.bed", rep = repetitions, er = all_error_rates),
		#expand("last/rep{rep}_e{er}.bed", rep = repetitions, er = all_error_rates),
		#expand("blast/rep{rep}_e{er}.bed", rep = repetitions, er = all_error_rates),
		#expand("blast_default/rep{rep}_e{er}.bed", rep = repetitions, er = all_error_rates),
		#expand("valik/rep{rep}_e{er}.gff", rep = repetitions, er = all_error_rates)
	shell:
		"echo 'Done'"

include: "rules/simulate.smk"
include: "rules/dream.smk"
include: "rules/stellar.smk"
include: "rules/blast.smk"
include: "rules/last.smk"
include: "rules/lastz.smk"
include: "rules/evaluate.smk"
